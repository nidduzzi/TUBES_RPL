openapi: 3.0.0
info:
  title: Tiketin
  description: API Documentation for Tiketin API
  contact:
    name: Ahmad Izzuddin
    email: ahmadizzuddin@upi.edu
  license:
    name: MPL 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  version: "1.0"
servers:
- url: http://localhost:9000
tags:
- name: Admin Endpoint
- name: Authentification Endpoint
- name: Event Endpoint
- name: Event Organizer Endpoint
- name: Moderation Endpoint
- name: Payment Endpoint
- name: Registration Endpoint
- name: Reservation Endpoint
- name: Ticket Endpoint
- name: User Endpoint
- name: Webhook
paths:
  /users:
    get:
      tags:
      - User Endpoint
      - Admin Endpoint
      summary: Query Users
      description: Query list of users for Admin
      operationId: get-users
      parameters:
      - name: q
        in: query
        description: query condition JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: h
        in: query
        description: query format JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Query successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: UserEndpoint
    post:
      tags:
      - Registration Endpoint
      - User Endpoint
      summary: Create New User
      description: Create a new user.
      operationId: post-user
      parameters: []
      requestBody:
        description: Post the necessary fields for the API to create a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
            examples:
              Create User Bob Fellow:
                value:
                  username: BobFellow
                  email: bob.fellow@gmail.com
                  password: fFf9@qe!
      responses:
        "201":
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    username: BobFellow
                    email: bob.fellow@gmail.com
                    emailVerified: false
                    signUpDate: 2020-11-18
        "400":
          description: Missing Required Information
        "409":
          description: Email Already Taken
      x-swagger-router-controller: RegistrationEndpoint
  /users/{id_user}:
    get:
      tags:
      - User Endpoint
      summary: Get User Details by id
      description: Retrieve the information of the user with the matching user ID.
      operationId: get-users-userId
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: UserEndpoint
    put:
      tags:
      - User Endpoint
      summary: Update User Details by id
      description: Update the information of an existing user.
      operationId: put-users-id_user
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Update user properties to update.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_1'
            examples:
              Update User Profile Picture:
                value:
                  profilePicture: string
              Update Username and Email:
                value:
                  username: RebeccaBaker
                  email: rebecca@gmail.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "409":
          description: Email already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
      security:
      - bearerAuth: []
      x-swagger-router-controller: UserEndpoint
  /users/terminate/{id_user}:
    put:
      tags:
      - Admin Endpoint
      - Moderation Endpoint
      - User Endpoint
      summary: Terminate an Existing User by id
      description: Admins put existing user on the terminated users list
      operationId: put-users-terminate-id_user
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_2'
      responses:
        "200":
          description: Successfully terminated user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
    delete:
      tags:
      - Admin Endpoint
      - User Endpoint
      - Moderation Endpoint
      summary: Remove user termination by id
      description: Remove user from the terminated users list
      operationId: delete-users-terminate-id_user
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Successfully removed user from terminate list
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /users/suspend/{id_user}:
    put:
      tags:
      - Admin Endpoint
      - Moderation Endpoint
      - User Endpoint
      summary: Suspend an Existing User by id
      description: Admins can suspend a user for a specific amount of time as specified
        in policy.
      operationId: put-users-suspend
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: 'Details of user suspension '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_3'
            examples:
              Suspend User for 3 days:
                value:
                  policy_breach: Ethical conduct
                  description: User conducted unethical acts
                  suspensionLength: 3 days
                  id_admin: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
              examples:
                Bob Ross Suspended for 1 week:
                  value:
                    policy_breach: Harassment
                    suspensionLength: 3 days
                    description: Bob Ross Suspended for 1 week
                    id_admin: 0
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
    delete:
      tags:
      - Admin Endpoint
      - User Endpoint
      summary: Unsuspend a Suspended User by id
      description: Remove a user from the suspended list.
      operationId: delete-users-suspend
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /users/warn/{id_user}:
    post:
      tags:
      - Admin Endpoint
      - Moderation Endpoint
      - User Endpoint
      summary: Warn a User by id
      description: "Admins can warn users of anything that is considered a breach\
        \ of TOS, Policy, Guidelines, etc."
      operationId: post-users-warn-id_user
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Description of the breach and the moderating admin.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_4'
      responses:
        "204":
          description: Successfully warned user of breach
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /users/authenticate:
    post:
      tags:
      - Authentification Endpoint
      - User Endpoint
      summary: Authenticate User and return a JWT token and a cookie with a refresh
        token
      description: Authentification based on user credentials
      operationId: authenticate
      requestBody:
        description: User Credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_5'
        required: true
      responses:
        "200":
          description: Successfully authentificated using the provided credentials
            or refresh token
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "400":
          description: The username or password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      x-swagger-router-controller: AuthentificationEndpoint
  /users/refresh-token:
    post:
      tags:
      - Authentification Endpoint
      - User Endpoint
      summary: Refresh User JWT token and get a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        description: The `refreshToken` cookie
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: Successfully authentificated using the provided credentials
            or refresh token
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "400":
          description: "The refresh token is invalid, revoked or expired"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AuthentificationEndpoint
  /users/revoke-token:
    post:
      tags:
      - Authentification Endpoint
      - User Endpoint
      - Admin Endpoint
      summary: Revoke a refresh token
      description: "Admin users can revoke the tokens of any user, regular users can\
        \ only revoke their own tokens."
      operationId: revokeToken
      parameters:
      - name: refreshToken
        in: cookie
        description: "The refresh token can be sent in a cookie or the post body,\
          \ if both are sent the token in the body is used."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_6'
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AuthentificationEndpoint
  /users/{id_user}/refresh-tokens:
    get:
      tags:
      - Admin Endpoint
      - Authentification Endpoint
      - User Endpoint
      summary: Get a list of all refresh tokens (active and revoked) of the user by
        id
      description: "Admin users can access any user's refresh tokens, regular users\
        \ are restricted to their own refresh tokens."
      operationId: getRefreshTokens
      parameters:
      - name: id_user
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 5eb12e197e06a76ccdefc121
      responses:
        "200":
          description: An array of refresh tokens for the specified user id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_6'
                x-content-type: application/json
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /users/{id_user}/reservations:
    get:
      tags:
      - User Endpoint
      - Reservation Endpoint
      summary: Get a list of user's reservations by id
      description: A user can retrieve the reservations that they have made
      operationId: get-users-id_user-reservations
      parameters:
      - name: id_user
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Retrival of user reservations successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: UserEndpoint
  /events:
    get:
      tags:
      - Event Endpoint
      summary: Query Events
      description: Queries events that meets the query conditions
      operationId: get-events
      parameters:
      - name: q
        in: query
        description: query conditions JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "{\"startDate\":{\"operator\":\">=\", \"value\":\"3/5/2021\"}}"
      - name: h
        in: query
        description: query format JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "{\"limit\":5, \"orderBy\":[\"reserved_tickets\"]}"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      x-swagger-router-controller: EventEndpoint
    post:
      tags:
      - Event Endpoint
      summary: Create a New Event
      description: Authorized Event Organizers create a new event.
      operationId: post-events
      requestBody:
        description: Event creation form data.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_7'
            examples: {}
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
      security:
      - bearerAuth: []
      x-swagger-router-controller: EventEndpoint
  /events/{id_event}:
    get:
      tags:
      - Event Endpoint
      summary: Retrieve Details of an Event by id
      description: Retrieves information and details of an event associated with the
        Event ID.
      operationId: get-events-id_event
      parameters:
      - name: id_event
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Fetch successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      x-swagger-router-controller: EventEndpoint
    put:
      tags:
      - Event Endpoint
      summary: Update Event Details
      description: Authorized Event Organizer updates the details of the event associated
        to the event ID.
      operationId: put-events-id_event
      parameters:
      - name: id_event
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Details of revised event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_8'
      responses:
        "200":
          description: Updated event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: EventEndpoint
  /events/{id_event}/reservations:
    get:
      tags:
      - Event Endpoint
      - Reservation Endpoint
      summary: Get reservations for event by id
      description: Event Organizers can fetch reservations that has been made for
        a specific event
      operationId: get-events-id_event-reservations
      parameters:
      - name: id_event
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Retrieval of Event reservations Successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: EventEndpoint
  /reservations:
    get:
      tags:
      - Admin Endpoint
      summary: Query reservations
      description: Admins can query the list of reservations
      operationId: get-reservations
      parameters:
      - name: q
        in: query
        description: query condition JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: h
        in: query
        description: query format JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Query successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
    post:
      tags:
      - Reservation Endpoint
      summary: Create new reservation
      description: Users create new reservation
      operationId: post-reservations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_9'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
      security:
      - bearerAuth: []
      x-swagger-router-controller: ReservationEndpoint
  /reservations/{id_reservation}:
    get:
      tags:
      - Reservation Endpoint
      summary: Get Reservation Details by id
      description: Users or Event Organizers retrieve the information of the reservation
        with the matching reservation ID.
      operationId: get-reservations-id_reservation
      parameters:
      - name: id_reservation
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Reservation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: ReservationEndpoint
  /reservations/confirm/{id_reservation}:
    put:
      tags:
      - Reservation Endpoint
      summary: Confirm a Reservation by id
      description: Confirm a reservation
      operationId: put-reservations-confirm-id_reservation
      parameters:
      - name: id_reservation
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_10'
      responses:
        "201":
          description: confirmation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: ReservationEndpoint
    delete:
      tags:
      - Reservation Endpoint
      summary: Remove a Reservation Confirmation by id
      description: Admins can remove a reservation from the confirmed list
      operationId: delete-reservations-confirm-id_reservation
      parameters:
      - name: id_reservation
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: ReservationEndpoint
  /reservations/cancel/{id_reservation}:
    put:
      tags:
      - Reservation Endpoint
      summary: Cancel a Reservation by id
      description: Users cancel a reservation
      operationId: put-reservations-cancel-id_reservation
      parameters:
      - name: id_reservation
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: ReservationEndpoint
    delete:
      tags:
      - Reservation Endpoint
      summary: Remove a Reservation Cancelation by id
      description: Admins remove reservation from cancelation list
      operationId: delete-reservations-cancel-id_reservation
      parameters:
      - name: id_reservation
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Reservation removed from canceled reservations list
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: ReservationEndpoint
  /payments:
    post:
      tags:
      - Payment Endpoint
      summary: Create Payment Intent
      description: User creates Payment intent with payment provider
      operationId: post-payments
      requestBody:
        description: Details of payment intent
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_11'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_2'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: PaymentEndpoint
  /payments/{id_payment}:
    get:
      tags:
      - Payment Endpoint
      summary: Get Payment information by id
      description: User fetch their payment information related to payment ID.
      operationId: get-payments-id_payment
      parameters:
      - name: id_payment
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: PaymentEndpoint
    put:
      tags:
      - Webhook
      summary: Update Payment by id
      description: External Payment provider update the pending payment specified
        by payment ID.
      operationId: put-payments-id_payment
      parameters:
      - name: id_payment
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: result status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_12'
      responses:
        "204":
          description: No Content
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Webhook
  /eventOrganizers:
    get:
      tags:
      - Event Organizer Endpoint
      summary: Query Event Organizers
      description: Retrieve all verified Event Organizers that match the query condition
        if any.
      operationId: get-eventOrganizers
      parameters:
      - name: q
        in: query
        description: query conditions JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: h
        in: query
        description: query format JSON string
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      x-swagger-router-controller: EventOrganizerEndpoint
    post:
      tags:
      - Registration Endpoint
      - Event Organizer Endpoint
      summary: Create a New Event Organizer
      description: Create a new event organizer to be verified by admin.
      operationId: post-eventOrganizers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_13'
      responses:
        "200":
          description: OK
      security:
      - bearerAuth: []
      x-swagger-router-controller: RegistrationEndpoint
  /eventOrganizers/{id_event_organizer}:
    get:
      tags:
      - Event Organizer Endpoint
      summary: Get Details of an Event Organizer by id
      description: Retrieve details of an Event Organizer associated to the Event
        Organizer ID.
      operationId: get-eventOrganizers-id_event_organizer
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
              examples: {}
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      x-swagger-router-controller: EventOrganizerEndpoint
    put:
      tags:
      - Event Organizer Endpoint
      summary: Update Event Organizer Details (add allowed users) by id
      description: |-
        Update Event Organizer Details associated to the Event Organizer ID.
        Modify Event Organizer Profile.
        Add or remove allowed users.
      operationId: put-eventOrganizers-id_event_organizer
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_14'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: EventOrganizerEndpoint
  /eventOrganizers/terminate/{id_event_organizer}:
    put:
      tags:
      - Admin Endpoint
      - Moderation Endpoint
      - User Endpoint
      summary: Terminate an Existing Event Organizers by id
      description: Admins put existing event organizers on the terminated users list
      operationId: put-eventOrganizers-terminate-id_event_organizer
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_15'
      responses:
        "200":
          description: Successfully terminated user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
    delete:
      tags:
      - Admin Endpoint
      - User Endpoint
      - Moderation Endpoint
      summary: Remove Event Organizer from Terminate list by id
      description: Remove event organizer from the terminated event organizer list
      operationId: delete-eventOrganizers-terminate-id_event_organizer
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Successfully removed user from terminate list
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /eventOrganizers/suspend/{id_event_organizer}:
    put:
      tags:
      - Admin Endpoint
      - Moderation Endpoint
      - User Endpoint
      summary: Suspend an Existing Event Organizer by id
      description: Admins can suspend a Event Organizer for a specific amount of time
        as specified in policy.
      operationId: put-eventOrganizers-suspend
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: 'Details of event organizer suspension '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_16'
            examples:
              Suspend User for 3 days:
                value:
                  policy_breach: Ethical conduct
                  description: User conducted unethical acts
                  suspensionLength: 3 days
                  id_admin: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
              examples:
                Bob Ross Suspended for 1 week:
                  value:
                    policy_breach: Harassment
                    suspensionLength: 3 days
                    description: Bob Ross Suspended for 1 week
                    id_admin: 0
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
    delete:
      tags:
      - Admin Endpoint
      - User Endpoint
      summary: Unsuspend a Suspended Event Organizer by id
      description: Remove an event organizer from the suspended list.
      operationId: delete-eventOrganizers-suspend
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /eventOrganizers/warn/{id_event_organizer}:
    post:
      tags:
      - Admin Endpoint
      - Moderation Endpoint
      - User Endpoint
      summary: Warn an Event Organizer by id
      description: "Admins can warn event organizers of anything that is considered\
        \ a breach of TOS, Policy, Guidelines, etc."
      operationId: post-eventOrganizers-warn-id_event_organizer
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Description of the breach and the moderating admin.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_17'
      responses:
        "204":
          description: Successfully warned event organizer of breach
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /admins/{id_admin}:
    get:
      tags:
      - Admin Endpoint
      summary: Get Admin details by id
      description: Retrieve the account information of an admin
      operationId: get-admins-id_admin
      parameters:
      - name: id_admin
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved admin account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /admins/authenticate:
    post:
      tags:
      - Authentification Endpoint
      - Admin Endpoint
      summary: Authenticate Admin and return a JWT token and a cookie with a refresh
        token
      description: Authentification based on Admin credentials
      operationId: post-admins-authenticate
      requestBody:
        description: Admin Credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_18'
        required: true
      responses:
        "200":
          description: Successfully authentificated using the provided credentials
            or refresh token
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "400":
          description: The username or password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      x-swagger-router-controller: AuthentificationEndpoint
  /admins/refresh-token:
    post:
      tags:
      - Authentification Endpoint
      - Admin Endpoint
      summary: Refresh Admin JWT token and get a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: post-admins-refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        description: The `refreshToken` cookie
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: Successfully authentificated using the provided credentials
            or refresh token
          headers:
            Set-Cookie:
              description: '`refreshToken`'
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "400":
          description: "The refresh token is invalid, revoked or expired"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AuthentificationEndpoint
  /admins/revoke-token:
    post:
      tags:
      - Admin Endpoint
      - Authentification Endpoint
      summary: Revoke an Admin refresh token
      description: "Admin users can revoke the tokens of any user, regular users can\
        \ only revoke their own tokens."
      operationId: post-admins-revokeToken
      parameters:
      - name: refreshToken
        in: cookie
        description: "The refresh token can be sent in a cookie or the post body,\
          \ if both are sent the token in the body is used."
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_19'
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /admins/{id_admin}/refresh-tokens:
    get:
      tags:
      - Authentification Endpoint
      - Admin Endpoint
      summary: Get a list of all refresh tokens (active and revoked) of the admin
        by id
      description: "Admin users can access any user's refresh tokens, regular users\
        \ are restricted to their own refresh tokens."
      operationId: get-admins-RefreshTokens
      parameters:
      - name: id_admin
        in: path
        description: Admin Id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: An array of refresh tokens for the specified admin id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_6'
                x-content-type: application/json
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AuthentificationEndpoint
  /eventOrganizers/{id_event_organizer}/events:
    get:
      tags:
      - Event Organizer Endpoint
      - Event Endpoint
      summary: Get events created by event organizer by id
      description: Retrieve events created by the specified event organizer
      operationId: get-eventOrganizers-id_event_organizer-events
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: EventOrganizerEndpoint
  /eventOrganizers/verify/{id_event_organizer}:
    put:
      tags:
      - Event Organizer Endpoint
      - Admin Endpoint
      summary: Verify Event Organizer by id
      description: Put event organizer on verified list by Admin
      operationId: put-eventOrganizers-verify-id_event_organizer
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: EventOrganizerEndpoint
    delete:
      tags:
      - Admin Endpoint
      - Event Organizer Endpoint
      summary: Unverify Event Organizer
      description: Remove event organizer from verified list by Admin
      operationId: delete-eventOrganizers-verify-id_event_organizer
      parameters:
      - name: id_event_organizer
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: "Access token is missing or invalid, or the user does not have\
            \ access to perform the action"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: "Forbidden access, insuffcient privilege"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
      x-swagger-router-controller: AdminEndpoint
  /users/verify-email/{verification_token}:
    get:
      tags:
      - User Endpoint
      - Registration Endpoint
      summary: Verify User Email
      description: Verify user email by sending request with verification token sent
        to email
      operationId: get-users-verify-email-verification-token
      parameters:
      - name: verification_token
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Email verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
      x-swagger-router-controller: UserEndpoint
  /eventOrganizers/verify-email/{verification_token}:
    get:
      tags:
      - Event Organizer Endpoint
      - Registration Endpoint
      summary: Verify Event Organizer Email
      description: Verify event organizer email by sending request with verification
        token sent to email
      operationId: get-eventOrganizers-verify-email-verification_token
      parameters:
      - name: verification_token
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Email verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_409'
      x-swagger-router-controller: EventOrganizerEndpoint
components:
  schemas:
    User:
      title: User
      required:
      - email
      - emailVerified
      - id
      - username
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        username:
          type: string
        email:
          type: string
          format: email
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        ragistrationDate:
          type: string
          description: The date that the user was created.
          format: date
        profilePicture:
          type: string
          format: binary
      example:
        emailVerified: true
        profilePicture: ""
        ragistrationDate: 2000-01-23
        id: 0
        email: ""
        username: username
      x-examples: {}
    Event:
      title: Event
      required:
      - description
      - has_rsvp
      - id
      - id_event_organizer
      - max_tickets
      - name
      - reserved_tickets
      - schedule
      - tags
      - ticket_types
      - unlimited_tickets
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        tagline:
          type: string
        description:
          type: string
        schedule:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        rsvp_deadline:
          type: string
        has_rsvp:
          type: boolean
        id_event_organizer:
          type: integer
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        max_tickets:
          type: integer
        unlimited_tickets:
          type: boolean
        reserved_tickets:
          type: integer
        public:
          type: boolean
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
        ticket_types:
          type: array
          items:
            $ref: '#/components/schemas/Ticket-Type'
      example:
        rsvp_deadline: rsvp_deadline
        unlimited_tickets: true
        has_rsvp: true
        ticket_types:
        - price: 3
          name: name
          description: description
          attributes:
          - name: name
            id: 9
            value: value
          - name: name
            id: 9
            value: value
          currency: currency
          id: 7
        - price: 3
          name: name
          description: description
          attributes:
          - name: name
            id: 9
            value: value
          - name: name
            id: 9
            value: value
          currency: currency
          id: 7
        description: description
        tags:
        - name: name
          description: description
          id: 5
        - name: name
          description: description
          id: 5
        max_tickets: 5
        schedule:
        - start_time: 2000-01-23T04:56:07.000+00:00
          name: name
          end_time: 2000-01-23T04:56:07.000+00:00
          all_day: true
          description: description
          id: 6
          place: place
        - start_time: 2000-01-23T04:56:07.000+00:00
          name: name
          end_time: 2000-01-23T04:56:07.000+00:00
          all_day: true
          description: description
          id: 6
          place: place
        public: true
        reservations:
        - numTickets: 5
          tickets:
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          price: 2
          currency: currency
          id: 0
          id_user: 6
          confirmed: true
        - numTickets: 5
          tickets:
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          price: 2
          currency: currency
          id: 0
          id_user: 6
          confirmed: true
        name: name
        reserved_tickets: 2
        tagline: tagline
        id_event_organizer: 1
        id: 0
    Tag:
      title: Tag
      required:
      - description
      - id
      - name
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
      description: Event Tags
      example:
        name: name
        description: description
        id: 5
      x-examples:
        Sport tag:
          id: 21
          name: Sport
          description: "There’s nothing like a good sports event, whether it’s football\
            \ or basketball, baseball or soccer. Game, set, watch!"
    Event-Organizer:
      title: Event-Organizer
      required:
      - address
      - email
      - id
      - name
      - phone
      - profilePicture
      - registrationDate
      - verificationDate
      - verified
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        verified:
          type: boolean
        profilePicture:
          type: string
          format: binary
        address:
          type: string
        registrationDate:
          type: string
          format: date
        verificationDate:
          type: string
          format: date
        phone:
          minLength: 1
          pattern: "^[+][0-9]{2,}[0-9]+$"
          type: string
        authorizedUsersId:
          minItems: 1
          uniqueItems: true
          type: array
          description: users authorized to use event organizer
          items:
            minimum: 0
            type: integer
      example:
        profilePicture: ""
        address: address
        phone: phone
        authorizedUsersId:
        - 0
        - 0
        name: name
        verified: true
        registrationDate: 2000-01-23
        id: 0
        email: ""
        verificationDate: 2000-01-23
    Schedule:
      title: Schedule
      required:
      - all_day
      - end_time
      - id
      - name
      - start_time
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        all_day:
          type: boolean
        place:
          type: string
      description: Describes When and Where something happens for an event
      example:
        start_time: 2000-01-23T04:56:07.000+00:00
        name: name
        end_time: 2000-01-23T04:56:07.000+00:00
        all_day: true
        description: description
        id: 6
        place: place
    Reservation:
      title: Reservation
      required:
      - confirmed
      - currency
      - id
      - id_user
      - numTickets
      - price
      - tickets
      type: object
      properties:
        id:
          type: integer
        id_user:
          type: integer
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        confirmed:
          type: boolean
        numTickets:
          type: integer
        price:
          type: integer
        currency:
          maxLength: 4
          type: string
      example:
        numTickets: 5
        tickets:
        - nama: nama
          identificationNumber: identificationNumber
          id_ticket_type: 5
          id: 1
          indentificaitionType: KTP
        - nama: nama
          identificationNumber: identificationNumber
          id_ticket_type: 5
          id: 1
          indentificaitionType: KTP
        price: 2
        currency: currency
        id: 0
        id_user: 6
        confirmed: true
    Ticket:
      title: Ticket
      required:
      - id
      - id_ticket_type
      - nama
      type: object
      properties:
        id:
          type: integer
        nama:
          type: string
          description: Name of ticket holder
        indentificaitionType:
          type: string
          enum:
          - KTP
          - Passport
          - Other
        identificationNumber:
          type: string
        id_ticket_type:
          type: integer
      example:
        nama: nama
        identificationNumber: identificationNumber
        id_ticket_type: 5
        id: 1
        indentificaitionType: KTP
    Ticket-Type:
      title: Ticket-Type
      required:
      - currency
      - id
      - name
      - price
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Ticket-Attribute'
        price:
          type: integer
        currency:
          maxLength: 3
          type: string
      example:
        price: 3
        name: name
        description: description
        attributes:
        - name: name
          id: 9
          value: value
        - name: name
          id: 9
          value: value
        currency: currency
        id: 7
    Ticket-Attribute:
      title: Ticket-Attribute
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        value:
          type: string
      example:
        name: name
        id: 9
        value: value
    Payment:
      title: Payment
      required:
      - amount
      - completed
      - currency
      - id
      - id_reservation
      type: object
      properties:
        id:
          type: integer
        amount:
          type: integer
        currency:
          type: string
        id_reservation:
          type: integer
        completed:
          type: boolean
          default: false
      example:
        amount: 6
        currency: currency
        id: 0
        completed: false
        id_reservation: 1
    Admin:
      title: Admin
      required:
      - id
      - username
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
      example:
        id: 0
        username: username
    Authentification:
      title: Authentification
      required:
      - id
      - jwtToken
      - username
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
        jwtToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y
      example:
        jwtToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y
        id: 1
        username: username
    inline_response_200:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      example:
        users:
        - emailVerified: true
          profilePicture: ""
          ragistrationDate: 2000-01-23
          id: 0
          email: ""
          username: username
        - emailVerified: true
          profilePicture: ""
          ragistrationDate: 2000-01-23
          id: 0
          email: ""
          username: username
    inline_response_401:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
    inline_response_403:
      type: object
      properties:
        message:
          type: string
    inline_response_404:
      type: object
      properties:
        message:
          type: string
          example: Not Found
    body:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          minLength: 1
          pattern: "^[A-Za-z0-9-_]"
          type: string
        email:
          type: string
          format: email
        password:
          minLength: 8
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"
          type: string
          format: password
          example: fFf9@qe!
    inline_response_200_1:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      example:
        user:
          emailVerified: true
          profilePicture: ""
          ragistrationDate: 2000-01-23
          id: 0
          email: ""
          username: username
    body_1:
      type: object
      properties:
        username:
          type: string
        profilePicture:
          type: string
          format: binary
        email:
          type: string
          format: email
        password:
          minLength: 8
          type: string
    inline_response_409:
      required:
      - message
      type: object
      properties:
        message:
          type: string
      example:
        message: message
    body_2:
      required:
      - description
      - policy_breach
      type: object
      properties:
        policy_breach:
          type: string
        description:
          type: string
    inline_response_200_2:
      type: object
      properties:
        policy_breach:
          type: string
        description:
          type: string
        id_admin:
          type: string
      example:
        policy_breach: policy_breach
        id_admin: id_admin
        description: description
    body_3:
      required:
      - description
      - id_admin
      - policy_breach
      - suspensionLength
      type: object
      properties:
        suspensionLength:
          type: string
          description: suspend user for specified ammount of time
        policy_breach:
          type: string
        description:
          type: string
        id_admin:
          type: integer
    inline_response_200_3:
      required:
      - description
      - id_admin
      - policy_breach
      - suspensionLength
      type: object
      properties:
        suspensionLength:
          type: string
        policy_breach:
          type: string
        description:
          type: string
        id_admin:
          type: integer
      example:
        suspensionLength: suspensionLength
        policy_breach: policy_breach
        id_admin: 0
        description: description
    body_4:
      required:
      - description
      - id_admin
      - policy_breach
      type: object
      properties:
        policy_breach:
          type: string
        description:
          type: string
        id_admin:
          type: integer
    body_5:
      required:
      - password
      type: object
      properties:
        username:
          type: string
          example: jason
        password:
          type: string
          example: pass123
        email:
          type: string
          format: email
          example: jason@example.com
    inline_response_200_4:
      required:
      - auth
      type: object
      properties:
        auth:
          $ref: '#/components/schemas/Authentification'
      example:
        auth:
          jwtToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y
          id: 1
          username: username
    inline_response_400:
      type: object
      properties:
        message:
          type: string
          example: Username or password is incorrect
    inline_response_400_1:
      type: object
      properties:
        message:
          type: string
          example: Invalid token
    body_6:
      type: object
      properties:
        token:
          type: string
          example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
    inline_response_200_5:
      type: object
      properties:
        message:
          type: string
          example: Token revoked
      example:
        message: Token revoked
    inline_response_200_6:
      type: object
      properties:
        token:
          type: string
          example: 79ea9a5e825da7c27d30839c89295071842f2a44b22e917aaf795126f4486509d8511c6fdedb6f1e
        expires:
          type: string
          example: 2020-06-24T03:29:13.871Z
        created:
          type: string
          example: 2020-06-17T03:29:13.871Z
        createdByIp:
          type: string
          example: 127.0.0.1
        isExpired:
          type: boolean
          example: false
        isActive:
          type: boolean
          example: true
        revoked:
          type: string
          example: 2020-06-17T03:29:13.871Z
        revokedByIp:
          type: string
          example: 127.0.0.1
        replacedByToken:
          type: string
          example: a01d3818db64961742f249beeded65739e9c3d1019570ea48ea820d274eac607043a6cbefd23c297
      example:
        expires: 2020-06-24T03:29:13.871Z
        createdByIp: 127.0.0.1
        replacedByToken: a01d3818db64961742f249beeded65739e9c3d1019570ea48ea820d274eac607043a6cbefd23c297
        created: 2020-06-17T03:29:13.871Z
        revokedByIp: 127.0.0.1
        isExpired: false
        isActive: true
        revoked: 2020-06-17T03:29:13.871Z
        token: 79ea9a5e825da7c27d30839c89295071842f2a44b22e917aaf795126f4486509d8511c6fdedb6f1e
    inline_response_200_7:
      required:
      - reservations
      type: object
      properties:
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
      example:
        reservations:
        - numTickets: 5
          tickets:
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          price: 2
          currency: currency
          id: 0
          id_user: 6
          confirmed: true
        - numTickets: 5
          tickets:
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          price: 2
          currency: currency
          id: 0
          id_user: 6
          confirmed: true
    inline_response_200_8:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      example:
        results:
        - rsvp_deadline: rsvp_deadline
          unlimited_tickets: true
          has_rsvp: true
          ticket_types:
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          description: description
          tags:
          - name: name
            description: description
            id: 5
          - name: name
            description: description
            id: 5
          max_tickets: 5
          schedule:
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          public: true
          reservations:
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          name: name
          reserved_tickets: 2
          tagline: tagline
          id_event_organizer: 1
          id: 0
        - rsvp_deadline: rsvp_deadline
          unlimited_tickets: true
          has_rsvp: true
          ticket_types:
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          description: description
          tags:
          - name: name
            description: description
            id: 5
          - name: name
            description: description
            id: 5
          max_tickets: 5
          schedule:
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          public: true
          reservations:
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          name: name
          reserved_tickets: 2
          tagline: tagline
          id_event_organizer: 1
          id: 0
    body_7:
      required:
      - description
      - has_rsvp
      - name
      - schedule
      - tags
      - ticket_types
      type: object
      properties:
        name:
          type: string
        tagline:
          type: string
        description:
          type: string
        schedule:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        rsvp_deadline:
          type: string
        has_rsvp:
          type: boolean
        ticket_types:
          type: array
          items:
            $ref: '#/components/schemas/Ticket-Type'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    inline_response_201:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
      example:
        event:
          rsvp_deadline: rsvp_deadline
          unlimited_tickets: true
          has_rsvp: true
          ticket_types:
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          description: description
          tags:
          - name: name
            description: description
            id: 5
          - name: name
            description: description
            id: 5
          max_tickets: 5
          schedule:
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          public: true
          reservations:
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          name: name
          reserved_tickets: 2
          tagline: tagline
          id_event_organizer: 1
          id: 0
    inline_response_200_9:
      required:
      - event
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
      example:
        event:
          rsvp_deadline: rsvp_deadline
          unlimited_tickets: true
          has_rsvp: true
          ticket_types:
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          description: description
          tags:
          - name: name
            description: description
            id: 5
          - name: name
            description: description
            id: 5
          max_tickets: 5
          schedule:
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          public: true
          reservations:
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          name: name
          reserved_tickets: 2
          tagline: tagline
          id_event_organizer: 1
          id: 0
    body_8:
      required:
      - description
      - has_rsvp
      - name
      - schedule
      - tags
      - ticket_types
      type: object
      properties:
        name:
          type: string
        schedule:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        description:
          type: string
        rsvp_deadline:
          type: string
          format: time
        has_rsvp:
          type: boolean
        tagline:
          type: string
        ticket_types:
          type: array
          items:
            $ref: '#/components/schemas/Ticket-Type'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    body_9:
      required:
      - id_event
      - id_user
      - tickets
      type: object
      properties:
        id_user:
          type: integer
        id_event:
          type: integer
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
    inline_response_201_1:
      type: object
      properties:
        reservation:
          $ref: '#/components/schemas/Reservation'
      example:
        reservation:
          numTickets: 5
          tickets:
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          - nama: nama
            identificationNumber: identificationNumber
            id_ticket_type: 5
            id: 1
            indentificaitionType: KTP
          price: 2
          currency: currency
          id: 0
          id_user: 6
          confirmed: true
    body_10:
      required:
      - id_payment
      type: object
      properties:
        id_payment:
          type: integer
    body_11:
      required:
      - currency
      - id_reservation
      - total
      type: object
      properties:
        id_reservation:
          type: integer
        total:
          type: integer
        currency:
          maxLength: 4
          type: string
    inline_response_201_2:
      required:
      - payment_intent
      type: object
      properties:
        payment_intent:
          $ref: '#/components/schemas/Payment'
      example:
        payment_intent:
          amount: 6
          currency: currency
          id: 0
          completed: false
          id_reservation: 1
    inline_response_200_10:
      required:
      - payment
      type: object
      properties:
        payment:
          $ref: '#/components/schemas/Payment'
      example:
        payment:
          amount: 6
          currency: currency
          id: 0
          completed: false
          id_reservation: 1
    paymentsid_payment_result:
      type: object
      properties:
        success:
          type: boolean
    body_12:
      required:
      - result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/paymentsid_payment_result'
    inline_response_200_11:
      type: object
      properties:
        eventOrganizers:
          type: array
          items:
            $ref: '#/components/schemas/Event-Organizer'
      example:
        eventOrganizers:
        - profilePicture: ""
          address: address
          phone: phone
          authorizedUsersId:
          - 0
          - 0
          name: name
          verified: true
          registrationDate: 2000-01-23
          id: 0
          email: ""
          verificationDate: 2000-01-23
        - profilePicture: ""
          address: address
          phone: phone
          authorizedUsersId:
          - 0
          - 0
          name: name
          verified: true
          registrationDate: 2000-01-23
          id: 0
          email: ""
          verificationDate: 2000-01-23
    body_13:
      required:
      - email
      - id_user
      - name
      type: object
      properties:
        id_user:
          type: integer
        name:
          type: string
        email:
          type: string
          description: event organizer email (eg. organization email)
        phone:
          type: string
        address:
          type: string
    inline_response_200_12:
      required:
      - event_organizer
      type: object
      properties:
        event_organizer:
          $ref: '#/components/schemas/Event-Organizer'
      example:
        event_organizer:
          profilePicture: ""
          address: address
          phone: phone
          authorizedUsersId:
          - 0
          - 0
          name: name
          verified: true
          registrationDate: 2000-01-23
          id: 0
          email: ""
          verificationDate: 2000-01-23
    body_14:
      required:
      - address
      - authorizedUsersId
      - email
      - name
      - password
      - phone
      - profilePicture
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        profilePicture:
          type: string
          format: binary
        address:
          type: string
        phone:
          type: string
        password:
          type: string
          format: password
        authorizedUsersId:
          minItems: 1
          uniqueItems: true
          type: array
          description: needs at least one user ID
          items:
            minimum: 0
            type: integer
    inline_response_200_13:
      type: object
      properties:
        event Organizer:
          $ref: '#/components/schemas/Event-Organizer'
      example:
        event Organizer:
          profilePicture: ""
          address: address
          phone: phone
          authorizedUsersId:
          - 0
          - 0
          name: name
          verified: true
          registrationDate: 2000-01-23
          id: 0
          email: ""
          verificationDate: 2000-01-23
    body_15:
      required:
      - description
      - policy_breach
      type: object
      properties:
        policy_breach:
          type: string
        description:
          type: string
    inline_response_200_14:
      type: object
      properties:
        policy_breach:
          type: string
        description:
          type: string
        id_admin:
          type: integer
      example:
        policy_breach: policy_breach
        id_admin: 0
        description: description
    body_16:
      required:
      - description
      - policy_breach
      - suspensionLength
      type: object
      properties:
        suspensionLength:
          type: string
          description: suspend user for specified ammount of time
        policy_breach:
          type: string
        description:
          type: string
    body_17:
      required:
      - description
      - policy_breach
      type: object
      properties:
        policy_breach:
          type: string
        description:
          type: string
    inline_response_200_15:
      required:
      - admin
      type: object
      properties:
        admin:
          $ref: '#/components/schemas/Admin'
      example:
        admin:
          id: 0
          username: username
    body_18:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    body_19:
      type: object
      properties:
        token:
          type: string
          example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
    inline_response_200_16:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      example:
        events:
        - rsvp_deadline: rsvp_deadline
          unlimited_tickets: true
          has_rsvp: true
          ticket_types:
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          description: description
          tags:
          - name: name
            description: description
            id: 5
          - name: name
            description: description
            id: 5
          max_tickets: 5
          schedule:
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          public: true
          reservations:
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          name: name
          reserved_tickets: 2
          tagline: tagline
          id_event_organizer: 1
          id: 0
        - rsvp_deadline: rsvp_deadline
          unlimited_tickets: true
          has_rsvp: true
          ticket_types:
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          - price: 3
            name: name
            description: description
            attributes:
            - name: name
              id: 9
              value: value
            - name: name
              id: 9
              value: value
            currency: currency
            id: 7
          description: description
          tags:
          - name: name
            description: description
            id: 5
          - name: name
            description: description
            id: 5
          max_tickets: 5
          schedule:
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          - start_time: 2000-01-23T04:56:07.000+00:00
            name: name
            end_time: 2000-01-23T04:56:07.000+00:00
            all_day: true
            description: description
            id: 6
            place: place
          public: true
          reservations:
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          - numTickets: 5
            tickets:
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            - nama: nama
              identificationNumber: identificationNumber
              id_ticket_type: 5
              id: 1
              indentificaitionType: KTP
            price: 2
            currency: currency
            id: 0
            id_user: 6
            confirmed: true
          name: name
          reserved_tickets: 2
          tagline: tagline
          id_event_organizer: 1
          id: 0
  responses:
    UnauthorizedError:
      description: "Access token is missing or invalid, or the user does not have\
        \ access to perform the action"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    Forbidden:
      description: "Forbidden access, insuffcient privilege"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_403'
    Authentificated:
      description: Successfully authentificated using the provided credentials or
        refresh token
      headers:
        Set-Cookie:
          description: '`refreshToken`'
          style: simple
          explode: false
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_4'
  securitySchemes:
    bearerAuth:
      type: http
      description: JSON Web Token Authentification
      scheme: bearer
      bearerFormat: JWT
